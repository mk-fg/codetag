# codetag tool configuration file

# Paths to scan, "~" will be expanded to $HOME or pw_dir
paths:
  - ~/hatch/codetag
  - ~/hatch/go


# List of filters for paths to crawl and files to tag
filter:
  # Go regexp patterns to match relative (to source.path, starting with "/") paths to tag.
  # Patterns are matched against each path in order they're listed here.
  # Each pattern must start with "+" or "-", "+" meaning that matched path will
  #  be tagged/traversed and "-" for the opposite.
  # Leaf directories are matched with the trailing slash
  #  (as with rsync) to be distinguishable from files with the same name.
  # If path doesn't match any regexp on the list, it will be tagged.
  # Excluded directories won't be traversed.
  # Go/re2 regexp syntax ref: https://code.google.com/p/re2/wiki/Syntax
  # Enclose regexps in single quotes to make sure "-regexp" won't be interpreted as yaml list.
  #
  # Examples:
  #  - '+/\.git/config$'   # tag git repository config files
  #  - '-/\.git/.'   # *don't* tag any repository objects
  #  - '-/\.(hg|bzr|redo)/'  # these won't be traversed at all
  #  - '-(?i)/\.?svn(/|ignore)$'   # exclude svn (or .svn) paths (case-insensitive) and ignore-lists

  - '+/\.git/config$'
  - '-/\.git/.'
  - '-/\.(hg|bzr|redo)/'
  - '-(?i)/\.?svn(/|ignore)$'


# Taggers are configurable plugins that return a string tag for a file,
#  given it's location. What they do to that path (or files) is plugin-specific.
# "taggers" should be a map, with tag namespace (e.g. "lang" part in "lang:py")
#  as a key and either scalar plugin name or map with "name: config..." as value.
# Special-case namespace "_none" can be used to use returned tags w/o prefix.
taggers:
  host:
    - git.host:
      github: '^github\.com$'
      local: '^fraggod\.net$'
    - hg.host:
      bitbucket: '^bitbucket\.org$'
  lang: lang_detect_paths
  scm: scm_detect_paths

# See go-logging docs (github.com/mk-fg/go-logging) for format specs
logging:
  loggers:
    root: DEBUG,console
    vaughan0: FATAL

  console:
    type: console
    stream: stderr
    format: $time $level: ($file:$line) $msg

  # logfile:
  #   type: file
  #   file: file.log
  #   format: '$time $level ($logger) $msg'
